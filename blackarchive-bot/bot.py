```python
import logging
import os
from flask import Flask, request, Response
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    Dispatcher
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv(BOT_TOKEN)  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = 1279885111
WEBHOOK_URL = os.getenv(WEBHOOK_URL, httpsyour-bot.vercel.appwebhook)  # –ó–∞–º–µ–Ω–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
products = {
    1 {name üíé –í-–±–∞–∫—Å—ã Fortnite, price 100, desc 1000 V-bucks (–∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)},
    2 {name üîë Minecraft Premium, price 500, desc –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è Java Edition},
    3 {name üéÆ Steam Wallet, price 200, desc –ö–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ 5$}
}

users_carts = {}
orders = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
bot_app = Application.builder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
async def start(update Update, context ContextTypes.DEFAULT_TYPE)
    –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Mini App
    user = update.effective_user
    text = füéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üëá

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, web_app=WebAppInfo(url=httpstelegram-miniapp-ecru.vercel.app))]
    ])

    if update.message
        await update.message.reply_text(text, reply_markup=keyboard)
    elif update.callback_query
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)

async def my_orders(update Update, context ContextTypes.DEFAULT_TYPE)
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    user_orders = {kv for k,v in orders.items() if v['user_id'] == user_id}
    
    if not user_orders
        await query.edit_message_text(
            üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(üõí –í –∫–∞—Ç–∞–ª–æ–≥, callback_data=catalog)],
                [InlineKeyboardButton(üîô –í –º–µ–Ω—é, callback_data=back)]
            ])
        )
        return
    
    orders_text = üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ãnn
    for order_id, order in user_orders.items()
        orders_text += (
            füîπ –ó–∞–∫–∞–∑ #{order_id}n
            f   –°—Ç–∞—Ç—É—Å {order['status']}n
            f   –°—É–º–º–∞ {sum(products[pid]['price']qty for pid, qty in order['items'].items())}‚ÇΩnn
        )
    
    await query.edit_message_text(
        orders_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(üîô –ù–∞–∑–∞–¥, callback_data=back)]
        ])
    )

async def admin_panel(update Update, context ContextTypes.DEFAULT_TYPE)
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID
        await query.edit_message_text(‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!)
        return
    
    await query.edit_message_text(
        ‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, callback_data=admin_stats)],
            [InlineKeyboardButton(üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã, callback_data=admin_orders)],
            [InlineKeyboardButton(üîô –ù–∞–∑–∞–¥, callback_data=back)]
        ])
    )

async def admin_stats(update Update, context ContextTypes.DEFAULT_TYPE)
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    query = update.callback_query
    await query.answer()
    
    total_orders = len(orders)
    total_revenue = sum(
        sum(products[pid]['price']qty for pid, qty in order['items'].items())
        for order in orders.values()
    )
    
    await query.edit_message_text(
        füìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞nn
        f‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ {total_orders}n
        f‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ {total_revenue}‚ÇΩn
        f‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ {len(products)},
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(üîô –ù–∞–∑–∞–¥, callback_data=admin)]
        ])
    )

async def admin_orders(update Update, context ContextTypes.DEFAULT_TYPE)
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
    query = update.callback_query
    await query.answer()
    
    if not orders
        await query.edit_message_text(
            üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(üîô –ù–∞–∑–∞–¥, callback_data=admin)]
            ])
        )
        return
    
    orders_text = üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ãnn
    for order_id, order in orders.items()
        user = await context.bot.get_chat(order['user_id'])
        orders_text += (
            füîπ #{order_id} - {user.first_name}n
            f   –°—Ç–∞—Ç—É—Å {order['status']}n
            f   –°—É–º–º–∞ {sum(products[pid]['price']qty for pid, qty in order['items'].items())}‚ÇΩnn
        )
    
    await query.edit_message_text(
        orders_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(üîô –ù–∞–∑–∞–¥, callback_data=admin)]
        ])
    )

async def back_handler(update Update, context ContextTypes.DEFAULT_TYPE)
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
    await start(update, context)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot_app.add_handler(CommandHandler(start, start))
bot_app.add_handler(CallbackQueryHandler(my_orders, pattern=^my_orders$))
bot_app.add_handler(CallbackQueryHandler(admin_panel, pattern=^admin$))
bot_app.add_handler(CallbackQueryHandler(admin_stats, pattern=^admin_stats$))
bot_app.add_handler(CallbackQueryHandler(admin_orders, pattern=^admin_orders$))
bot_app.add_handler(CallbackQueryHandler(back_handler, pattern=^back$))

# Webhook endpoint
@app.route('webhook', methods=['POST'])
async def webhook()
    update = Update.de_json(request.get_json(), bot_app.bot)
    if update
        await bot_app.process_update(update)
    return Response(status=200)

@app.route('')
def health_check()
    return Bot is running!

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async def init_bot()
    await bot_app.initialize()
    await bot_app.bot.set_webhook(WEBHOOK_URL)

# –ó–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == __main__
    import asyncio
    asyncio.run(init_bot())
    app.run(debug=True)
```